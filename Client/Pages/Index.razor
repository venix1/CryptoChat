@page "/"
@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@using CryptoChat.Shared;
@using System.Linq;
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager
@implements IDisposable

@* TODO: Figure out how to split this into multiple components *@

@if (!HasGroup) { 
<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Group:
        <input @bind="groupInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Password:
        <input @bind="passwordInput" />
    </label>
</div>
<button @onclick="Connect" disabled="@(!IsConnected)">Connect</button>
<button @onclick="Verify" disabled="@(!HasGroup)">Verify</button>
}
else {
<div class="chat-app container" >
    <div id="chatbox" class="chatbox row">
        <div id="conversation" class="conversation col-9 card">
            @foreach (var message in ChatClient.History) {
                <div class="message">@message</div>
            }
            <div id="anchor"></div>
        </div>
        <div id="members" class = "members card col">
            <div>Party Size: ???</div>
            <b>Active:</b>
            <div id="activeMembers">
            @foreach (var peer in ChatClient.Group.PeerList.Where(p => (DateTime.Now - p.LastActive).TotalSeconds <= 90)) {
                <div class="member d-flex justify-content-end" data-toggle="tooltip" data-placement="top" title="Last Active: @peer.LastActive" >@peer.Name</div>
            }</div>
            <b>Inactive:</b>
            <div id="inactiveMembers">
            @foreach (var peer in ChatClient.Group.PeerList.Where(p => (DateTime.Now - p.LastActive).TotalSeconds > 90)) {
                <div class="member d-flex justify-content-end" data-toggle="tooltip" data-placement="top" title="Last Active: @peer.LastActive" >@peer.Name</div>
            }
            </div>
        </div>
    </div>
    <div class="row">
    <div class="messageBox col card">
        <span><input placeholder="Your message..." @bind="messageInput" @onkeyup="SendMessage" /></span>
    </div>
    </div>
</div>
}
@code {
    private HubConnection hubConnection;
    private string userInput;
    private string groupInput;
    private string passwordInput;
    private string messageInput;
    private CryptoChat ChatClient { get; set; }
    protected override async Task OnInitializedAsync()
    {
        // TODO: Hub shoud CryptedTransport(Generated ECDH)
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/chathub"))
            .Build();

        // TODO: Becomes only function, which hands off to ChatApp for processing
        hubConnection.On<byte[]>("ReceiveMessage", async (message) =>
        {
            try
            {
                var count = ChatClient.History.Count;
                var update = await Extensions.IsScrolled(jsRuntime, "conversation");

                await ChatClient.OnMessage(message);
                StateHasChanged();

                Console.WriteLine($"{update} {count} {ChatClient.History.Count}");
                if (update && ChatClient.History.Count != count)
                    await Extensions.ScrollToEnd(jsRuntime, "conversation");
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        });

        await hubConnection.StartAsync();
    }

    async void Timer()
    {
        var period = DateTime.UtcNow;

        while (true)
        {
            if ((DateTime.UtcNow - period).TotalSeconds > 60)
            {
                Console.WriteLine("Timer triggered");
                await ChatClient.Ping();
                StateHasChanged();
                period = DateTime.UtcNow;
            }

            await Task.Delay(10000);
        }
    }

    Task Verify()
    {
        // Level 1 TLS is HTTPS.  This can be considered passively transparent.
        // Level 2 is TLS for SignalR.  This is actively transparent.
        // Level 3 is PSK.  This is secure unless a malicious party has stolen.

        // Level 2 TLS provides a fingerprint for Client/Server comms.  However,
        // an active attacker can manipulate this as client/server have no PSK.
        // Therefore, independent check over ToR or VPN will verify.

        // Do nothing right now. 
        // TODO: This should generate a URL, which when accessed through another
        // source, will help verify the Finger for second level TLS.
        // Recommeded via TOR or VPN.

        return Task.FromResult(0);
    }
    async Task Send(byte[] data)
    {
        Console.WriteLine("Sending message...");
        await hubConnection.SendAsync("SendMessage", ChatClient.Channel, data);
    }

    async Task Connect()
    {
        var passwdBytes = System.Text.Encoding.UTF8.GetBytes(passwordInput);
        var groupBytes = System.Text.Encoding.UTF8.GetBytes(groupInput);
        ChatClient = new CryptoChat(Send, groupBytes, passwdBytes);

        // This is sets up server routing only.
        await hubConnection.SendAsync("JoinGroup", ChatClient.Channel);

        // Handle Chat related joining
        await ChatClient.Join();
        await ChatClient.SetNick(userInput);

        // Periodic Updates are necessary
        // Maybe a better way to do this, not stopping execution is important.
        Timer();
    }

    private async void SendMessage(KeyboardEventArgs args)
    {
        if (args.Key != "Enter" || messageInput == "" || messageInput == null)
            return;
        Console.WriteLine("Send text");
        await ChatClient.TextMessage(messageInput);
        messageInput = "";
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;
    public bool HasGroup =>
        ChatClient != null && ChatClient.Group != null;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}